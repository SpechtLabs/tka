basePath: /api/v1alpha1
definitions:
  models.ClusterListItem:
    description: Contains the details of a single cluster
    properties:
      api_endpoint:
        type: string
      description:
        type: string
      labels:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
    type: object
  models.ClusterListResponse:
    description: Contains a list of clusters that the user has access to
    properties:
      items:
        items:
          $ref: '#/definitions/models.ClusterListItem'
        type: array
    type: object
  models.ErrorResponse:
    description: Structured error response with contextual advice
    properties:
      advice:
        description: |-
          List of suggestions to help resolve the error
          example: ["Check your Tailscale connection", "Verify you have the required capabilities"]
        items:
          type: string
        type: array
      message:
        description: |-
          Primary error message
          example: Failed to authenticate user
        type: string
    type: object
  models.TkaClusterInfo:
    description: Contains cluster information including API endpoint, CA data, TLS
      settings, and identifying labels
    properties:
      ca_data:
        description: |-
          CAData contains the base64-encoded Certificate Authority (CA) data for the Kubernetes cluster.
          This is used to verify the TLS certificate presented by the API server.
          The data should be the PEM-encoded CA certificate, encoded as base64.
          If empty and InsecureSkipTLSVerify is false, the system's root CA bundle will be used.
        type: string
      insecure_skip_tls_verify:
        description: |-
          InsecureSkipTLSVerify controls whether TLS certificate verification should be skipped when connecting to the cluster.
          When true, the client will accept any certificate presented by the server and any hostname matching errors.
          This should only be set to true for development/testing environments with self-signed certificates.
          Production clusters should use valid certificates and keep this false for security.
        type: boolean
      labels:
        additionalProperties:
          type: string
        description: |-
          Labels is a set of key-value pairs that can be used to identify and categorize the cluster.
          These labels help users distinguish between different clusters and can be used for
          automation, monitoring, or organizational purposes.
          Common examples: environment (dev/staging/prod), region, project, team ownership, etc.
        type: object
      server_url:
        description: |-
          ServerURL is the public Kubernetes API server URL or IP address that users should connect to.
          This should be the externally accessible endpoint of the cluster's API server.
          Example: "https://api.cluster.example.com:6443" or "https://192.168.1.100:6443"
        type: string
    type: object
  models.UserLoginResponse:
    description: Contains authenticated user information and session details
    properties:
      role:
        description: |-
          Role assigned to the user in Kubernetes
          example: cluster-admin
        type: string
      until:
        description: |-
          Expiration timestamp of the authentication credentials in RFC3339 format
          example: 2023-12-31T23:59:59Z
        type: string
      username:
        description: |-
          Username of the authenticated user
          example: alice@example.com
        type: string
    type: object
info:
  contact:
    email: tka@specht-labs.de
    name: Specht Labs
    url: specht-labs.de
  description: API for authenticating and authorizing Kubernetes access via Tailscale
    identity.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Tailscale Kubernetes Auth API
  version: "1.0"
paths:
  /api/v1alpha1/cluster-info:
    get:
      description: Returns cluster connection details including API endpoint, CA data,
        TLS settings, and labels for authenticated users to configure their kubeconfig
      produces:
      - application/json
      responses:
        "200":
          description: Successfully returned cluster information
          schema:
            $ref: '#/definitions/models.TkaClusterInfo'
        "500":
          description: Internal Server Error - Error processing the request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - TailscaleAuth: []
      summary: Get cluster connection information
      tags:
      - authentication
  /api/v1alpha1/kubeconfig:
    get:
      description: Generates and returns a kubeconfig file for the authenticated Tailscale
        user
      produces:
      - application/yaml
      - application/json
      responses:
        "200":
          description: OK - Returns kubeconfig file
          schema:
            type: file
        "400":
          description: Bad Request - Tagged nodes not supported or error unmarshaling
            capability or multiple capability rules
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden - Request from Funnel or no capability rule found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found - User not authenticated or credentials not ready
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error - Error with WhoIs or generating kubeconfig
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - TailscaleAuth: []
      summary: Get kubeconfig for authenticated user
      tags:
      - authentication
  /api/v1alpha1/login:
    get:
      description: Retrieves the current authentication status for a Tailscale user
      produces:
      - application/json
      responses:
        "200":
          description: OK - Returns the current user authentication status
          schema:
            $ref: '#/definitions/models.UserLoginResponse'
        "400":
          description: Bad Request - Tagged nodes not supported or error unmarshaling
            capability or multiple capability rules
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden - Request from Funnel or no capability rule found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error - Error with WhoIs or retrieving user
            status
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - TailscaleAuth: []
      summary: Get user authentication status
      tags:
      - authentication
    post:
      consumes:
      - application/json
      description: Authenticates a user through Tailscale, validates their capability
        rule, and provisions Kubernetes credentials
      produces:
      - application/json
      responses:
        "202":
          description: Accepted - User authenticated and credentials are being provisioned
          schema:
            $ref: '#/definitions/models.UserLoginResponse'
        "400":
          description: Bad Request - Tagged nodes not supported or error unmarshaling
            capability or multiple capability rules
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden - Request from Funnel or no capability rule found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Unprocessable Entity - Invalid capability rule (period too
            short)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error - Error with WhoIs, parsing duration,
            or signing in user
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - TailscaleAuth: []
      summary: Authenticate user and provision Kubernetes credentials
      tags:
      - authentication
  /api/v1alpha1/logout:
    post:
      description: Revokes Kubernetes credentials for the authenticated Tailscale
        user
      produces:
      - application/json
      responses:
        "200":
          description: OK - User successfully logged out with login info
          schema:
            $ref: '#/definitions/models.UserLoginResponse'
        "400":
          description: Bad Request - Tagged nodes not supported or error unmarshaling
            capability or multiple capability rules
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden - Request from Funnel or no capability rule found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found - User not authenticated
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error - Error with WhoIs, parsing duration,
            or during logout process
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - TailscaleAuth: []
      summary: Log out authenticated user
      tags:
      - authentication
  /orchestrator/v1alpha1/clusters:
    get:
      consumes:
      - application/json
      description: Lists all clusters that the user has access to
      produces:
      - application/json
      responses:
        "200":
          description: A list of clusters that the user has access to
          schema:
            $ref: '#/definitions/models.ClusterListResponse'
        "400":
          description: Bad Request - Tagged nodes not supported or error unmarshaling
            capability or multiple capability rules
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden - Request from Funnel or no capability rule found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error - Error with WhoIs, parsing duration,
            or signing in user
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - TailscaleAuth: []
      summary: List all clusters that the user has access to
      tags:
      - Orchestrator
    post:
      consumes:
      - application/json
      description: Registers a new cluster with the orchestrator
      parameters:
      - description: Cluster to register
        in: body
        name: cluster
        required: true
        schema:
          $ref: '#/definitions/models.ClusterListItem'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully registered cluster
          schema:
            $ref: '#/definitions/models.ClusterListItem'
        "400":
          description: Bad Request - Invalid request body or validation errors
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden - Request from Funnel or no capability rule found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error - Error processing the request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - TailscaleAuth: []
      summary: Register a new cluster
      tags:
      - Orchestrator
securityDefinitions:
  TailscaleAuth:
    description: Authentication happens automatically via the Tailscale network. The
      server performs a WhoIs lookup on the client's IP address to determine identity.
      This header is for documentation purposes only and is not actually required
      to be set.
    in: header
    name: X-Tailscale-User
    type: apiKey
swagger: "2.0"
