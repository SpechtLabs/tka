name: Release Please & Publish

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write
  issues: write
  id-token: write
  pull-requests: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate:
    name: Quality Validations
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version-file: "go.mod"
          cache: true
          cache-dependency-path: "**/*.sum"

      - name: GolangCI Lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest

      - name: Run format-check
        run: |
          UNFORMATTED=$(gofmt -l .)
          if [ -n "$UNFORMATTED" ]; then
            echo "The following files are not formatted according to gofmt:"
            echo "$UNFORMATTED"
            exit 1
          fi

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version-file: "go.mod"
          cache: true
          cache-dependency-path: "**/*.sum"

      - name: Run tests
        run: go test -race -cover -covermode=atomic -coverprofile=coverage.txt ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  release-please:
    name: Release Please
    runs-on: ubuntu-latest
    needs:
      - test
      - validate

    steps:
      - uses: googleapis/release-please-action@v4
        id: release-please
        with:
          release-type: simple
          package-name: tailscale-k8s-auth
          bump-minor-pre-major: true
          bump-patch-for-minor-pre-major: true

    outputs:
      release_created: ${{ steps.release-please.outputs.release_created }}

  goreleaser:
    name: GoReleaser Build & Publish
    runs-on: ubuntu-latest
    needs:
      - release-please

    if: needs.release-please.outputs.release_created

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version-file: "go.mod"
          cache-dependency-path: "**/*.sum"
          cache: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          args: release --clean --config .goreleaser.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
